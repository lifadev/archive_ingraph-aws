# Copyright 2020 Farzad Senart and Lionel Suss. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from typing import Any, Dict, Final, List
from . import Tag

_NAMESPACE = "{{ namespace }}"

{% for parent, spec in dict(sorted(data.items())).items() %}
class {{ parent }}:
    """Documentation: {{ spec.Documentation }}"""

    {% for attr, value in spec.Attributes.items() %}
    {{ attr }}: Final[{{ getattrtype(value) }}]
    {% endfor %}

    def __init__(
        self
        {% if spec.Properties %}
            ,*
            {% for prop, value in dict(sorted(spec.Properties.items())).items() %}
                {% if value.Required %}
        ,{{ prop }}: {{ getproptype(data, value, parent) }}
                {% endif %}
            {% endfor %}
            {% for prop, value in dict(sorted(spec.Properties.items())).items() %}
                {% if not value.Required %}
        ,{{ prop }}: {{ getproptype(data, value, parent) }}=...
                {% endif %}
            {% endfor %}
        {% if namespace == "AWS::CloudFormation" and parent == "CustomResource" %}
        ,**kwargs: Any
        {% endif %}
        {% endif %}
    ) {% if not spec.Properties %} -> None {% endif %}: ...

    {% for child, spec in dict(sorted(spec.PropertyTypes.items())).items() %}
    class {{ child }}:
        def __init__(
            self
            {% if spec.Properties %}
                ,*
                {% for prop, value in dict(sorted(spec.Properties.items())).items() %}
                    {% if value.Required %}
            ,{{ prop }}: {{ getproptype(data, value, parent) }}
                    {% endif %}
                {% endfor %}
                {% for prop, value in dict(sorted(spec.Properties.items())).items() %}
                    {% if not value.Required %}
            ,{{ prop }}: {{ getproptype(data, value, parent) }}=...
                    {% endif %}
                {% endfor %}
            {% endif %}
      ) {% if not spec.Properties %} -> None {% endif %}: ...
    {% endfor %}
{% endfor %}
